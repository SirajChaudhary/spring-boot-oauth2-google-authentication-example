# =======================
# Application Info
# =======================
spring.application.name=spring-boot-oauth2-google-authentication-example
server.port=8080

# =======================
# Google OAuth2 Setup
# =======================
# 1. Go to https://console.cloud.google.com/apis/credentials
# 2. Create OAuth 2.0 Client ID -> Application type: Web application
# 3. Set Authorized redirect URI -> http://localhost:8080/login/oauth2/code/google
#    (Spring Security default: /login/oauth2/code/{registrationId}, here {registrationId}=google)
# 4. Copy Client ID and Client Secret below (do NOT commit secrets to Git)
# 5. Recommended scopes: openid, profile, email
# 6. Start app and test login via URL: http://localhost:8080/oauth2/authorization/google

spring.security.oauth2.client.registration.google.client-id=1068065136110-v5sdb0e7045ecvs4rb80fl7uf2lsbicn.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub